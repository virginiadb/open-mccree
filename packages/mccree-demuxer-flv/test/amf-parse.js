'use strict';
const chai = require('chai');
const amfParse = require('../src/amf-parser.js').default;
const expect = chai.expect;
describe('amf parse', function(){
  describe('constructor check', function(){
    it('constructor is a class', function(){
      expect(amfParse).to.be.a('function');
      expect(amfParse.prototype).to.be.a('Object');
    });
  });
  
  describe('construction', function(){
    it('construction', function(){
      let parser = new amfParse({});
      expect(parser.offset).to.be.equal(0);
      expect(parser.data).to.be.a('object');
    });
  });
  
  let data = [2,0,10,111,110,77,101,116,97,68,97,116,97,3,0,8,100,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,8,102,105,108,101,83,105,122,101,0,0,0,0,0,0,0,0,0,0,5,119,105,100,116,104,0,64,148,0,0,0,0,0,0,0,6,104,101,105,103,104,116,0,64,134,128,0,0,0,0,0,0,12,118,105,100,101,111,99,111,100,101,99,105,100,2,0,4,97,118,99,49,0,13,118,105,100,101,111,100,97,116,97,114,97,116,101,0,64,162,192,0,0,0,0,0,0,9,102,114,97,109,101,114,97,116,101,0,64,57,0,0,0,0,0,0,0,12,97,117,100,105,111,99,111,100,101,99,105,100,2,0,4,109,112,52,97,0,13,97,117,100,105,111,100,97,116,97,114,97,116,101,0,64,96,0,0,0,0,0,0,0,15,97,117,100,105,111,115,97,109,112,108,101,114,97,116,101,0,64,231,112,0,0,0,0,0,0,15,97,117,100,105,111,115,97,109,112,108,101,115,105,122,101,0,64,48,0,0,0,0,0,0,0,13,97,117,100,105,111,99,104,97,110,110,101,108,115,0,64,0,0,0,0,0,0,0,0,6,115,116,101,114,101,111,1,1,0,7,101,110,99,111,100,101,114,2,0,33,79,112,101,110,32,66,114,111,97,100,99,97,115,116,101,114,32,83,111,102,116,119,97,114,101,32,118,48,46,54,53,53,98,0,6,99,100,110,95,105,112,2,0,12,50,49,56,46,51,48,46,57,56,46,49,51,0,0,9,4,0,5,0,6,0,8,0,0,0,0,9];
  let parser = new amfParse(data);
  describe('parser test', function(){
    let result = parser.parseMetadata();
  }); 
});